<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[FanteDFSh_wuhu]]></title>
    <url>%2F2019%2F07%2F02%2FFanteDFSh-wuhu%2F</url>
    <content type="text"><![CDATA[跟女朋友实习结束后去了芜湖方特，我从家里出发，由于没有合适的火车，只能早上5点钟到芜湖站。]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>游记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[阿里实习总结与感悟]]></title>
    <url>%2F2019%2F06%2F22%2FExperience-in-Alibaba%2F</url>
    <content type="text"><![CDATA[在阿里巴巴实习了将近一年的时间，这一年来最大的收获并不是在技术的某个方面的提升，而是完成了思想上从校园向职场人的逐渐转变。思维上的转变其实是弥足珍贵的，如果初入职场就能做好思想的准备，有明确的职业规划，并且凭借已经养成的良好的学习工作习惯，那么在一个优秀的平台里工作一定会让自己有更多的获得感，更好更快的成长。只有在职业前期有足够的积累，有更好的成长，才能够在中后期享有提前成长的红利，进而获得更多的机会，甚至可能会完成职业生涯的“爆发”。接下来是我的几点感悟以及我的解读和感悟后对自己要求： 1. 技术仍是安身立命之本。作为一个软件工程师，技术能力仍然是个人的核心竞争力。我认为的技术能力可以分为三个方面，分别是技术深(广)度，领域抽象能力，以及技术学习能力。 1.1 技术深度和广度技术深度是指对技术的底层原理和抑或代码实现有比较通透的理解。作为一个基础扎实的Java研发需要对于并发，虚拟机，Spring，MySQL，缓存，消息中间件等技术有比较透彻的理解。这个是解决所面临的疑难问题的基石。在阿里这样的大公司里，几乎所有的中间件都有专门的团队负责，使用过程中遇到什么问题可以直接去找相关同学询问原因和解决方案，并且这些中间件产品提供了完整的控制中心的页面。所以很多时候工作中使用的技术对使用者来说是透明的。假如没有了平台的支持，一旦出了一些疑难杂症，就需要自己去解决掉。有的问题可能是别人已经遇到的，Google一下就可以。可是有时候只有自己的业务遇到了，就只能硬读代码甚至改造了。如果没有对使用的这些技术有比较深的理解，日常的使用场景还可以应付，但是优化问题或者高阶的难题上就会捉襟见肘。所以说技术深度一定要足够，这是行走江湖的内功。技术广度是指围绕自己的技术成长涉猎多的其他技术。日常的工作中必定会面临一些新的场景，在现有的架构不允许的情况下，必须要另谋出路。技术广度的优势在这时就体现出来，即虽然我暂时还没有解决这个问题，但是我知道什么技术能够解决。再比如参与其他工程师负责项目的技术评审时，采用的技术选型未必是你使用过的。但是你需要知道该技术能干什么，原理大致是什么，是否适合当前业务的场景等。这也是你能坐在这里进行技术评审的原因。所以平时对于相关的技术需要多积累，在自己的技术栈上增加一些绿叶才会让整个技术树看起来更加繁茂。 1.2 领域抽象能力该能力并不隶属于某一个具体的技术，而是一种解决问题的抽象思维能力。我们编程是为了解决某一个领域特定的问题，那么如何把实际的问题用代码的方式去模拟并解决是很重要的一环。软件工程里领域模型建模是最开始的一步，也是后续工作的必须输入。在复杂的应用场景下，这种能力就更加重要。举个例子，阿里巴巴曾在2018年发布解决方案星环，它解决的问题是如何使用有限的开发资源将众多的业务场景抽象为一套面向场景化的商业能力，并输出为业务规范。比如越来越多的线下零售场景使用了淘宝业务中台的商品、订单、价格、交易、营销、库存系统等，这些也是整个经济体商业的基础设施。没有必要为一个新的业务重新搭建，所以将这些基础设施”上星环”能够极大地提高整体的研发效能，也是符合“小前台，大中台”战略思想。可以看出，面对这种更加全局，更加复杂的场景时，极强的领域抽象能力确实能够将问题拆解为更容易理解的问题从而可以让研发效率大大提升。而对于个人来讲，良好的领域抽象能力也会让我们对业务上手更快，也会有更深的理解。 1.3 技术学习能力技术的学习对于互联网从业的技术人员是很重要的。技术更新换代层出不穷，若要保持自己的竞争力就得保持对技术的热情以及无止境的学习的态度。实际上技术学习能力也很大程度取决于对已有技术的理解程度，如果基础扎实，对基础技术能够融会贯通了那么对于一门新技术就能够很快领略底层的原理，从而能够比较迅速地使其为我所用并且成为技术广度体系中的一部分。 2. 学会聪明地做事情。这一块主要是对个人来说如何正确的做事情。阿里员工有四大标准：聪明，乐观，皮实，自省。所以在这里做事情也一定要聪明的做事情。下面是我对聪明的做事情的几个理解。 2.1 不断思考业务价值人的工作精力总是有限的，那如果能付出在有限的精力拿到更好的结果肯定是愿意看到的的。那这就要求能够聪明的做事情。首先应该明确我们的目的是什么？仅仅是写代码吗？在阿里绝对不是。编程只是完成工作的一个重要手段，除此之外，还要求对负责的项目/业务有深刻的思考。逐渐的你需要去负责一部分的业务，那么你就成为了这块业务的owner，至此这块业务的起落都与你息息相关了。所以作为一个owner仅仅是熟悉当前的业务是不够的，还需要有自己深刻的思考。从技术和产品的方向思考业务的未来发展的方向，思考产品的生命周期，不断挖掘业务的可能性，发挥业务的想象空间。例如现在很多企业都推崇人工智能，那么久可以思考能否在我的业务里面融入智能的元素？会带来相应的业务结果吗？这些未必是业务自己提出来的，只要你有想象力，你的产品/业务也会插上想象的翅膀。 2.2 只做有业务价值的事情有思考就必须要有相应的实践。对业务没有价值或者低价值的事情既耗费了精力，又没有好的结果是可以调低优先级甚至say no的。例如在对产品规划的时候就把今年思考的有业务价值的事情分为几个“篮子”，篮子里面已经有一些已经计划好要做的事情。每当新的需求到来了或者与其他人共建的时候，就要想清楚这个事情做了能不能放在这几个篮子里，投入产出比高不高，切忌打黑工。这么做的内在的要求是要对自己的产品有极强的思考和把控能力，让业务能够又好又快的发展。 3. 发挥团队的力量。这一块是我对团队中自我的角色的理解。在大公司里任何形式的单打独斗都是不可取的，周围是一群很优秀的人，在这样的环境中工作一定要懂得发挥团队的力量。公司是你的平台，团队更是一个小平台，借助平台的力量会让你走的更远。具体可以分为以下几个方面： 3.1 善于学习请教这个不多说，进入阿里可以说大家个个都是身怀绝技的。他们身上一定有大量的东西可以供你学习，而作为一个应届生，学习更是不能落下。我的一个策略是，找到团队中比你高1-2级的觉得比较不错的同学，观察他是如何做事情的，可以借鉴学习。通常这样的榜样同学总有很多地方比你高明并且你能看得懂，所以模仿学习是很合适的。 3.2 合作要有结果工作中肯定避免不了和团队的人一起合作。既然是合作做事情，那么就会有分工，就会有汇总。所以同样对集体整体进度的把控要心中有规划。对于自己来说，合作的事情自己的部分一定要有反馈，时间如何？遇到了什么困难？需不需要大家一起解决？而面向其他合作方，也需要去协调资源，把控项目进度，结果互相知晓，也要让主管清楚现在在做什么，项目进展如何。所以合作的结果并不是最后才有的，而是过程中时时刻刻都在产生结果。 3.3 提升技术影响力技术影响力是初级程序员往高阶迈进的一个重要的一关。何为技术影响力？我的理解是别人想到你的产品就会立即想到你，这正是技术影响力所赋予的。对于新人来说可以慢慢地去锻炼，可以先从写技术文章做起。例如根据手头所做的业务中所遇到的痛点难点，把解决过程用技术文章的形式表现出来，甚至还可以将解决的方案输出位组件或者产品共有相似需求的人使用。团队内部不推荐重复造轮子，所以如果你造的轮子能够满足团队内部的需求，可以尝试去推广它。这就逐渐建立起了自己的技术影响力。即影响力先从团队内部建立起，即使是星环这种架构也是首先从业务平台的一些业务中逐渐接入的。在别人使用的过程中不断完善，直至达到接入方便，文档详细，使用后确有提升的目的。 以上便是我的实习总结与感悟，深感进入职场的几年后差别会逐渐显现出来。所以越早的积累越会能够在工作中将积累融会贯通从而形成自己做事情的方法论。欢迎大家分享你的想法，希望能够互相交流学习！]]></content>
      <categories>
        <category>实习工作</category>
      </categories>
      <tags>
        <tag>阿里</tag>
        <tag>工作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正则表达式中的^]]></title>
    <url>%2F2019%2F06%2F20%2F%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%AD%E7%9A%84%2F</url>
    <content type="text"><![CDATA[^是正则表达式中一个很重要的符号，但是它在正则表达式中确有以下两种不同的意义： 1. 表示匹配一段文本开头的位置。 2. 表示否定字符的意思。 接下来根据具体的案例看看^在这两种使用情景下有哪些不同？ 1. 限定开头 例如这个正则表达式 ^a.* 这个正则表达式就是用来匹配以小写的「a」开头的字符串， 如「alibaba」，但不能匹配「baidu」，「^」代表的是字符串第一个字母前面那个用肉眼看不见的位置。 12345 public static void main(String[] args) &#123; String reg1 = &quot;^a.*&quot;; System.out.println(Pattern.matches(reg1, &quot;alibaba&quot;)); System.out.println(Pattern.matches(reg1, &quot;balibaba&quot;));&#125; 上面代码的输出是 true 和 false，符合预期。 2. 否定字符 [^a].* 以上面这个正则表达式为例，一般情况下我们会使用两种思路去理解。 不匹配「a」和「b」开头的字符串。 匹配除「a」和「b」以外的所有字符串开头的字符串。 通过这两种思路去理解这个正则表达式， 最终的答案都是一样的，也是正确的。我们思考问题的逻辑思路更倾向于第一种理解方式。然而对于整套正则表达式体系理念来说，第一种理解方式是错误的。在正则表达式理念中，只有去「匹配」些什么，从来没有「不匹配」这一说法，这一点是必须要区分清楚的。当我们处理正则问题时，在梳理逻辑时将「匹配」与「不匹配」混杂在一起，势必会增加处理问题的复杂度，对于简单的问题受到的影响也许不是很明显，就像上面举的例子那样，因为还在我们智力的承受范围内，但碰到复杂的问题时，就会像掉进沼泽一样，怎么爬也爬不出来，最终被困死在泥潭中。但是，假如只是以单纯的「匹配」去理解，就能简化处理问题的难度，降低复杂度，2肯定比1复杂。 因此，正则表达式最重要的核心理念就是「匹配」。另外，在程序设计中用到的替换、切割、查找等操作， 都是程序类库封装的功能， 和正则表达式本身半毛钱关系也没有。理解「匹配」也就意味着对学习正则表达式的入门。 12345 public static void main(String[] args) &#123; String reg2 = &quot;[^a].*&quot;; System.out.println(Pattern.matches(reg2, &quot;alibaba&quot;)); System.out.println(Pattern.matches(reg2, &quot;balibaba&quot;));&#125; 以上代码输出的结果是 false 和 true,符合预期。 借鉴一个记忆的方法： 乌龟把头[^]缩进里面，变为无（非)头乌龟 乌龟把头 ^ 伸出来，变为(首）领]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[测试第一篇博客]]></title>
    <url>%2F2019%2F04%2F05%2Ftest-my-blog%2F</url>
    <content type="text"><![CDATA[本篇博客与4月5日创建，又于6月19日修改。博客主题是next，参考https://dandyxu.me/想加入鼠标悬停在页面上，会有蒲公英式的图形围绕在鼠标四周的JS动画，但是不知道是什么，也不知道怎么弄………]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
</search>
